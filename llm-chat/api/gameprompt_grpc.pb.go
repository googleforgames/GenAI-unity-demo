// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: api/gameprompt.proto

package gameprompt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Converse_AreYouBusy_FullMethodName  = "/gameprompt.Converse/AreYouBusy"
	Converse_AskQuestion_FullMethodName = "/gameprompt.Converse/AskQuestion"
)

// ConverseClient is the client API for Converse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConverseClient interface {
	AreYouBusy(ctx context.Context, in *AreYouBusyQuestion, opts ...grpc.CallOption) (*AreYouBusyAnswer, error)
	AskQuestion(ctx context.Context, in *Question, opts ...grpc.CallOption) (Converse_AskQuestionClient, error)
}

type converseClient struct {
	cc grpc.ClientConnInterface
}

func NewConverseClient(cc grpc.ClientConnInterface) ConverseClient {
	return &converseClient{cc}
}

func (c *converseClient) AreYouBusy(ctx context.Context, in *AreYouBusyQuestion, opts ...grpc.CallOption) (*AreYouBusyAnswer, error) {
	out := new(AreYouBusyAnswer)
	err := c.cc.Invoke(ctx, Converse_AreYouBusy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *converseClient) AskQuestion(ctx context.Context, in *Question, opts ...grpc.CallOption) (Converse_AskQuestionClient, error) {
	stream, err := c.cc.NewStream(ctx, &Converse_ServiceDesc.Streams[0], Converse_AskQuestion_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &converseAskQuestionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Converse_AskQuestionClient interface {
	Recv() (*Answer, error)
	grpc.ClientStream
}

type converseAskQuestionClient struct {
	grpc.ClientStream
}

func (x *converseAskQuestionClient) Recv() (*Answer, error) {
	m := new(Answer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConverseServer is the server API for Converse service.
// All implementations must embed UnimplementedConverseServer
// for forward compatibility
type ConverseServer interface {
	AreYouBusy(context.Context, *AreYouBusyQuestion) (*AreYouBusyAnswer, error)
	AskQuestion(*Question, Converse_AskQuestionServer) error
	mustEmbedUnimplementedConverseServer()
}

// UnimplementedConverseServer must be embedded to have forward compatible implementations.
type UnimplementedConverseServer struct {
}

func (UnimplementedConverseServer) AreYouBusy(context.Context, *AreYouBusyQuestion) (*AreYouBusyAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreYouBusy not implemented")
}
func (UnimplementedConverseServer) AskQuestion(*Question, Converse_AskQuestionServer) error {
	return status.Errorf(codes.Unimplemented, "method AskQuestion not implemented")
}
func (UnimplementedConverseServer) mustEmbedUnimplementedConverseServer() {}

// UnsafeConverseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConverseServer will
// result in compilation errors.
type UnsafeConverseServer interface {
	mustEmbedUnimplementedConverseServer()
}

func RegisterConverseServer(s grpc.ServiceRegistrar, srv ConverseServer) {
	s.RegisterService(&Converse_ServiceDesc, srv)
}

func _Converse_AreYouBusy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreYouBusyQuestion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConverseServer).AreYouBusy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Converse_AreYouBusy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConverseServer).AreYouBusy(ctx, req.(*AreYouBusyQuestion))
	}
	return interceptor(ctx, in, info, handler)
}

func _Converse_AskQuestion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Question)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConverseServer).AskQuestion(m, &converseAskQuestionServer{stream})
}

type Converse_AskQuestionServer interface {
	Send(*Answer) error
	grpc.ServerStream
}

type converseAskQuestionServer struct {
	grpc.ServerStream
}

func (x *converseAskQuestionServer) Send(m *Answer) error {
	return x.ServerStream.SendMsg(m)
}

// Converse_ServiceDesc is the grpc.ServiceDesc for Converse service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Converse_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gameprompt.Converse",
	HandlerType: (*ConverseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AreYouBusy",
			Handler:    _Converse_AreYouBusy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AskQuestion",
			Handler:       _Converse_AskQuestion_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/gameprompt.proto",
}
